
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Car —ñ–∑ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ —ñ –º–µ—Ç–æ–¥–∞–º–∏.
// class Car {
/*
* –î–æ–¥–∞–π —Å—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ `getSpecs(car)`,
* —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç-–º–∞—à–∏–Ω—É —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä —ñ –≤–∏–≤–æ–¥–∏—Ç—å
* –≤ –∫–æ–Ω—Å–æ–ª—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π maxSpeed, speed, isOn, distance –∏ price.
*/
/*
* –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Ç—Ä–∏–º—É—î –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.
*
* –î–æ–¥–∞–π –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—É:
* speed - –ø–æ—Ç–æ—á–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å, –ø–æ—á–∞—Ç–∫–æ–≤–∞ 0
* price - —Ü—ñ–Ω–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
* maxSpeed - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å
* isOn - –∑–∞–≤–µ–¥–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å, –∑–Ω–∞—á–µ–Ω–Ω—è true –∞–±–æ false. –°–ø–æ—á–∞—Ç–∫—É false
* distance - –∑–∞–≥–∞–ª—å–Ω–∏–π –∫—ñ–ª–æ–º–µ—Ç—Ä–∞–∂, —Å–ø–æ—á–∞—Ç–∫—É 0
*/
// constructor() {}
/*
* –î–æ–¥–∞–π –≥–µ—Ç—Ç–µ—Ä —ñ —Å–µ—Ç—Ç–µ—Ä –¥–ª—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ price,
* —è–∫–∏–π –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—é —Ü—ñ–Ω–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è.
*/
/*
* –î–æ–¥–∞–π –∫–æ–¥ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–∞–≤–µ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å
* –ó–∞–ø–∏—Å—É—î —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å isOn –∑–Ω–∞—á–µ–Ω–Ω—è true
*/
// turnOn() {}
/*
* –î–æ–¥–∞–π –∫–æ–¥ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–∞–≥–ª—É—à–∏—Ç–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å
* –ó–∞–ø–∏—Å—É—î —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å isOn –∑–Ω–∞—á–µ–Ω–Ω—è false,
* —ñ —Å–∫–∏–¥–∞—î –ø–æ—Ç–æ—á–Ω—É —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤ 0
*/
// turnOff() {}
/*
* –î–æ–¥–∞—î –¥–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ speed –æ—Ç—Ä–∏–º–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è,
* –∑–∞ —É–º–æ–≤–∏, —â–æ —Ä–µ–∑—É–ª—å—Ç—É—é—á–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å
* –Ω–µ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ maxSpeed
*/
// accelerate(value) {}
/*
* –ó–∞–±–∏—Ä–∞—î –≤—ñ–¥ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ speed –æ—Ç—Ä–∏–º–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è,
* –∑–∞ —É–º–æ–≤–∏, —â–æ —Ä–µ–∑—É–ª—å—Ç—É—é—á–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –Ω–µ –º–µ–Ω—à–µ –Ω—É–ª—è
*/
// decelerate(value) {}
/*
* –î–æ–¥–∞—î –≤ –ø–æ–ª–µ distance –∫—ñ–ª–æ–º–µ—Ç—Ä–∞–∂ (hours * speed),
* –∞–ª–µ —Ç—ñ–ª—å–∫–∏ –≤ —Ç–æ–º—É –≤–∏–ø–∞–¥–∫—É, —è–∫—â–æ –º–∞—à–∏–Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∞!
*/
// drive(hours) {}
// }
// const mustang = new Car({ maxSpeed: 200, price: 2000 });
// mustang.turnOn();
// mustang.accelerate(50);
// mustang.drive(2);
// Car.getSpecs(mustang);
//  maxSpeed: 200, speed: 50, isOn: true, distance: 100, price: 2000
// mustang.decelerate(20);
// mustang.drive(1);
// mustang.turnOff();
// Car.getSpecs(mustang);
//  maxSpeed: 200, speed: 0, isOn: false, distance: 130, price: 2000
// console.log(mustang.price);  2000
// mustang.price = 4000;
// console.log(mustang.price);  4000


class Car {
    constructor({    speed = 0,
        price = 0,
        maxSpeed = 0,
        isOn = false,
        distance = 0,
    }) {
        this.speed = speed;
        this.price = price;
        this.maxSpeed = maxSpeed;
        this.isOn = isOn;
        this.distance = distance;
    }
    
    get viewPrices() {
        return this.price;
      }
      set changePrices(newPrice) {
        this.price = newPrice;
      }

      turnOn() {
        if (this.isOn === false) {
          this.isOn = true;
          console.log(
            ""
          );
    
          return this.isOn;
        } else if (this.isOn) {
          console.log("");
          return this.isOn;
        } else {
          return "";
        }
      }
      turnOff() {
        if (this.isOn) {
          this.isOn = false;
          this.speed = 0;
          console.log("The car has successfully been turned off");
          return this.isOn;
        } else if (this.isOn === false) {
          console.log("");
          return this.isOn;
        } else {
          return "";
        }
      }
      accelerate(value) {
        if (this.speed + value <= this.maxSpeed) {
          console.log("");
          this.speed += value;
          return this.speed;
        } else if (this.speed + value > this.maxSpeed) {
          console.log(
            ""
          );
          return this.speed;
        } else {
          return "";
        }
      }
      deaccelerate(value) {
        if (this.speed - value >= 0) {
          console.log("StopüèÅ");
          this.speed -= value;
          return this.speed;
        } else if (this.speed - value < 0) {
          console.log("");
          return this.speed;
        } else {
          return "";
        }
      }
      drive(hours) {
        if (this.isOn) {
          this.distance = this.speed * hours;
          console.log(` ${this.distance}`);
          return this.distance;
        } else {
          console.log("");
          return this.isOn;
        }
      }
    
};

const mustang = new Car({ maxSpeed: 200, price: 2000 });
mustang.turnOn();
mustang.accelerate(50);
mustang.drive(2);
Car.getSpecs(mustang);

mustang.decelerate(20);
mustang.drive(1);
mustang.turnOff();
Car.getSpecs(mustang);

console.log(mustang.price);
mustang.price = 4000;
console.log(mustang.price);